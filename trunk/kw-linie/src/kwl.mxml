<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:maps="com.google.maps.*"
	xmlns:xyz="mx.rpc.*"
	initialize="bunkerResponder.token = bunkerService.findAll()"
	layout="absolute">

	<mx:Script source="GoogleMapKeys.as" />

	<mx:Script>
		<![CDATA[
	    	import com.google.maps.MapMouseEvent;
	    	import coo.Lambert72Coo;
	    	import com.google.maps.InfoWindowOptions;
	    	import com.google.maps.styles.FillStyle;
	    	import com.google.maps.styles.StrokeStyle;
	    	import com.google.maps.overlays.MarkerOptions;
	    	import com.google.maps.overlays.Marker;
	    	import com.google.maps.controls.MapTypeControl;
	    	import com.google.maps.controls.PositionControl;
	    	import com.google.maps.controls.ZoomControl;
		    import com.google.maps.LatLng;
		    import com.google.maps.Map;
		    import com.google.maps.MapEvent;
		    import com.google.maps.MapType;
			import com.google.maps.interfaces.IOverlay;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.CallResponder;
			import mx.controls.Alert;
			
			public var bunkerThumb:BunkerThumb = new BunkerThumb();
			
			public var overlays: Array = new Array();
			
			/*
            public function bunkerGrid_onChange(event: Event) : void {
            	var bunker: Object = bunkerGrid.selectedItem;
				bunkerThumb.bunker = bunker;
				var m: Marker = overlays[bunker.nummer];
				m.openInfoWindow(new InfoWindowOptions({customContent:bunkerThumb, width:170, drawDefaultFrame:true}));
            }
            */
            
            public function displaymarkers() : void {
				var markerA:Marker;
				var c: coo.Lambert72Coo = new Lambert72Coo();
				var p:Point;
				var t_lat: Number = 0.0;
				var t_lng: Number = 0.0;
				var bxy : Array = bunkerResponder.lastResult as Array;
				for each (var xy:Object in bxy) {
					p = c.convert(xy.x as Number, xy.y as Number);
					t_lat += p.y * 180.0 / Math.PI;
					t_lng += p.x * 180.0 / Math.PI;
					markerA = new Marker(
					new LatLng(p.y * 180.0 / Math.PI, p.x * 180.0 / Math.PI),
					new MarkerOptions({
						strokeStyle: new StrokeStyle({color: 0xDDDD88}),
						fillStyle: new FillStyle({color: 0x880000, alpha: 0.8}),
						radius: 8,
						hasShadow: true,
						draggable: false
					}));
					/*
					markerA.addEventListener(MapMouseEvent.DRAG_START, 
						function(event:MapMouseEvent):void {
						});
					markerA.addEventListener(MapMouseEvent.DRAG_END,
						function(event:MapMouseEvent):void {
						});
						*/ 
					markerA.addEventListener(MapMouseEvent.CLICK,
						function(event:MapMouseEvent):void {
							var m: Marker = event.target as Marker;
							var index: String = "";
							for (index in overlays) {
								if (overlays[index] == m) {
									break;
								}
							}
							for each (var b: Object in bxy) {
								if (b.nummer == index) {
									bunkerThumb.bunker = b;
									m.openInfoWindow(new InfoWindowOptions({customContent:bunkerThumb, width:160, drawDefaultFrame:true}));
									//bunkerGrid.selectedItem = b;
									break;
								}
							}
						}); 
					overlays[xy.nummer as String] = markerA;
        			map.addOverlay(markerA);
				}
				t_lat /= bxy.length;
				t_lng /= bxy.length;
		    	map.setCenter(new LatLng(t_lat,t_lng), 10, MapType.NORMAL_MAP_TYPE);
            }
            
		    private function onMapReady(event:Event):void {
		    	var map:Map = this.map;
				map.addControl(new ZoomControl());
				map.addControl(new PositionControl());
				map.addControl(new MapTypeControl());
				
				if (bunkerResponder.lastResult) {
					displaymarkers();
				}
		    }
		    
		    private function bunkerResponderResult(event: Event) : void {
		    	if (map.isLoaded()) {
					displaymarkers();
		    	}
		    }
		    
            /*
            public function typefilter_change() : void {
            	if (typefilter.selectedLabel == "[ANY]") {
            		bxy = allbunkers;
            		for each (var overlay: IOverlay in overlays) {
            			overlay.visible = true;
            		}
            	} else {
	            	var result: ArrayCollection = new ArrayCollection();
	            	for (var i: Object in allbunkers) {
	            		var bunker: Object = allbunkers[i];
	            		if (bunker.type == typefilter.selectedLabel) {
	            			result.addItem(bunker);
	            			overlays[bunker.nummer].visible = true;
	            		} else {
	            			overlays[bunker.nummer].visible = false;
	            		}
	            	}
	            	bxy = result.toArray();
            	}
            	map.closeInfoWindow();
            }
            */

		]]>
	</mx:Script>
	
	<xyz:CallResponder id="bunkerResponder"
		result="bunkerResponderResult(event)" />
	
	<xyz:CallResponder id="bunkerTypeResponder" />

	<mx:ArrayCollection id="bunkerTypes" source="{bunkerTypeResponder.lastResult}" />
	
	<mx:RemoteObject id="bunkerService"
		source="kwl.BunkerService"
		destination="amfphp">
        <mx:method name="findAllTypes" />
        <mx:method name="findAll" />
    </mx:RemoteObject>

	<mx:VBox width="480">
		<!--
		<mx:Form paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" visible="false">
			<mx:FormItem label="Type">
				<mx:ComboBox id="typefilter" 
					dataProvider="{bunkerTypes}"
					selectedIndex="0" 
					creationComplete="bunkerTypeResponder.token = bunkerService.findAllTypes()"></mx:ComboBox>
			</mx:FormItem>
		</mx:Form>
		-->

		<maps:Map id="map"
			width="100%" height="640"
			key="{getKey(application.url)}"
			mapevent_mapready="onMapReady(event)">
			
		</maps:Map>

		<!--
		<mx:DataGrid 
			rowCount="5" width="100%" visible="false"
			dataProvider="{bunkerResponder.lastResult}" id="bunkerGrid" 
			change="bunkerGrid_onChange(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="Nummer" dataField="nummer" width="64"/>
				<mx:DataGridColumn headerText="Type" dataField="type" />
				<mx:DataGridColumn headerText="Code" dataField="code" visible="false"/>
				<mx:DataGridColumn headerText="nr" dataField="nr" visible="false"/>
				<mx:DataGridColumn headerText="Gemeente" dataField="gemeente" visible="false"/>
				<mx:DataGridColumn headerText="X" dataField="x" width="96"/>
				<mx:DataGridColumn headerText="Y" dataField="y" width="96"/>
			</mx:columns>
		</mx:DataGrid>
		-->

	</mx:VBox>

</mx:Application>
