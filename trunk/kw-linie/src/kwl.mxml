<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:maps="com.google.maps.*"
	xmlns:xyz="mx.rpc.*"
	creationComplete="creationComplete()"
	layout="absolute"
	backgroundColor="#637449" 
	themeColor="#637449" 
	backgroundGradientColors="[#637449,#637449]" xmlns:utils="com.hillelcoren.utils.*" xmlns:components="components.*">

	<mx:Script>
		<![CDATA[
			import com.google.maps.overlays.PolylineOptions;
			import com.google.maps.overlays.Polyline;
			import referenceData.Gemeente;
	    	import com.google.maps.controls.MapTypeControl;
	    	import com.google.maps.controls.PositionControl;
	    	import com.google.maps.controls.ZoomControl;
		    import com.google.maps.LatLng;
		    import com.google.maps.Map;
		    import com.google.maps.MapEvent;
		    import com.google.maps.MapType;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.CallResponder;
			
			public var bunkerMarkers: ArrayCollection;
			
			private const ALLEMAAL: String = "[ALLE]";
			
			[Bindable]
			public var typeLijst: ArrayCollection = new ArrayCollection([ALLEMAAL]);
			
			[Bindable]
			public var codeLijst: ArrayCollection = new ArrayCollection([ALLEMAAL]);
			
			[Bindable]
			public var gemeenteLijst: ArrayCollection = new ArrayCollection([ALLEMAAL]);
			
			[Bindable]
			public var deelgemeenteLijst: ArrayCollection = new ArrayCollection([ALLEMAAL]);
			
			public function creationComplete() : void {
				bunkerResponder.token = bunkerService.findAll();

				typeResponder.token = bunkerService.findTypes();
				codeResponder.token = bunkerService.findCodes();
				gemeenteResponder.token = bunkerService.findGemeentes();
				deelgemeenteResponder.token = bunkerService.findDeelgemeentes();
			}
			
            public function displaymarkers() : void {
				var bunkers : Array = bunkerResponder.lastResult as Array;
				var previous: BunkerMarker = null;
				var line : Polyline;
				var vertices: Array = new Array();
				bunkerMarkers = new ArrayCollection();
				for each (var bunker:Object in bunkers) {
					if (bunker.lat != null  && bunker.lng != null) {
						var bunkerMarker: BunkerMarker = new BunkerMarker(bunker);
	        			map.addOverlay(bunkerMarker.marker);
	        			bunkerMarkers.addItem(bunkerMarker);
	        			
	        			if (previous != null && previous.bunker.code != bunkerMarker.bunker.code) {
							var lineOptions:PolylineOptions = new PolylineOptions({
								  strokeStyle: {
								    thickness: 3,
								    color: BunkerMarker.bunkerTypeColors[previous.bunker.type]["fillColor"],
								    alpha: 0.5,
								    pixelHinting: false
								  }
								});
	        				line = new Polyline(vertices, lineOptions);
	        				map.addOverlay(line);
	        				vertices = new Array();
     				}
	        			
	        			vertices.push(bunkerMarker.latLng);
	        			
	        			previous = bunkerMarker;
				}
            }
				lineOptions = new PolylineOptions({
					  strokeStyle: {
					    thickness: 3,
					    color: BunkerMarker.bunkerTypeColors[previous.bunker.type]["fillColor"],
					    alpha: 0.5,
					    pixelHinting: false
					  }
					});
				line = new Polyline(vertices, lineOptions);
				map.addOverlay(line);
				vertices = new Array();
            }
            
		    private function onMapReady(event:Event):void {
		    	var map:Map = this.map;
				map.addControl(new ZoomControl());
				map.addControl(new PositionControl());
				map.addControl(new MapTypeControl());
				map.setCenter(new LatLng(50.97652410041966, 4.5602220120386106),
					10, MapType.NORMAL_MAP_TYPE);
				
				if (bunkerResponder.lastResult) {
					displaymarkers();
				}
		    }
		    
		    private function bunkerResponderResult(event: Event) : void {
		    	if (map.isLoaded()) {
					displaymarkers();
		    	}
		    }
		    
		    private function filterTypeMarkers(type: String) : Boolean {
		    	var result : Boolean = false;
		    	result ||= (type == "commandobunker") && cb_commandobunker.selected;
		    	result ||= (type == "kanaalbunker") && cb_kanaalbunker.selected;
		    	result ||= (type == "verdediging 1e lijn") && cb_verdediging_1e_lijn.selected;
		    	result ||= (type == "verdediging 2e lijn") && cb_verdediging_2e_lijn.selected;
		    	result ||= (type == "verdediging antitankcentrum") && cb_verdediging_antitankcentrum.selected;
		    	return result;
		    }
		    
		    private function filterMarkers() : void {
		    	for each (var bunkerMarker: BunkerMarker in bunkerMarkers) {
		    		var bunker: Object = bunkerMarker.bunker;
		    		var visible: Boolean = true;
		    		visible &&= filterTypeMarkers(bunker.type);
		    		visible &&= codeFilter.selectedIndex<=0 || (bunker.code == codeFilter.selectedLabel);
		    		visible &&= gemeenteFilter.selectedIndex<=0 || (bunker.gemeente == gemeenteFilter.selectedLabel);
		    		visible &&= deelgemeenteFilter.selectedIndex<=0 || (bunker.deelgemeente == deelgemeenteFilter.selectedLabel);
		    		bunkerMarker.marker.visible = visible;
		    	}
		    }
		    
		    private function filterLijst(source: Array) : ArrayCollection {
		    	var result : ArrayCollection = new ArrayCollection(source);
		    	result.addItemAt(ALLEMAAL, 0);
		    	return result;
		    }
		    
		    private function deelgemeente_onChangeHandler(event: Event) : void {
		    	var dg: String = deelgemeenteFilter.selectedLabel;
		    	if (ALLEMAAL != dg) {
		    		var g: String = Gemeente.deelgemeenteGemeente[dg];
		    		if (g != null && g != gemeenteFilter.selectedLabel) {
		    			gemeenteFilter.selectedValue = g;
		    		}
		    	}
		    }
		    
		]]>
	</mx:Script>
	
	<xyz:CallResponder id="bunkerResponder" result="bunkerResponderResult(event)" />
	
	<xyz:CallResponder id="typeResponder" result="typeLijst = filterLijst(typeResponder.lastResult);"/>

	<xyz:CallResponder id="codeResponder" result="codeLijst = filterLijst(codeResponder.lastResult);"/>

	<xyz:CallResponder id="gemeenteResponder" result="gemeenteLijst = filterLijst(gemeenteResponder.lastResult);"/>

	<xyz:CallResponder id="deelgemeenteResponder" result="deelgemeenteLijst = filterLijst(deelgemeenteResponder.lastResult);"/>

	<mx:RemoteObject id="bunkerService"
		source="kwl.BunkerService"
		destination="amfphp">
    </mx:RemoteObject>

	<mx:HBox horizontalGap="10">

		<maps:Map id="map"
			width="512" height="640"
			key="ABQIAAAAL4gDNG8jsapnfnIxxSbmXBQgfeSkNN7qNgPfoxJaK42Uxer2KxS2iBxqn9eykR2TxIcr6N3_pEWP1A"
			mapevent_mapready="onMapReady(event)">
		</maps:Map>

		<mx:VBox width="186">

			<mx:Label text="Selecteer op bunkertype"  color="#FFFFFF" fontWeight="bold"/>
			<mx:CheckBox 
				fillColors="[#888800,#888800]"
				fillAlphas="[1,1]"
				iconColor="#FFFFFF"
				label="commandobunker" 
				id="cb_commandobunker" 
				valueCommit="filterMarkers();"
				selected="true" color="#FFFFFF" textRollOverColor="#FFFFFF" textSelectedColor="#FFFFFF"/>
			<mx:CheckBox 
				fillColors="[#000088,#000088]"
				fillAlphas="[1,1]"
				iconColor="#FFFFFF"
				label="kanaalbunker" 
				id="cb_kanaalbunker" 
				valueCommit="filterMarkers();"
				selected="true" color="#FFFFFF" textRollOverColor="#FFFFFF" textSelectedColor="#FFFFFF"/>
			<mx:CheckBox 
				fillColors="[#880000,#880000]"
				fillAlphas="[1,1]"
				iconColor="#FFFFFF"
				label="verdediging 1e lijn" 
				id="cb_verdediging_1e_lijn" 
				valueCommit="filterMarkers();"
				selected="true" color="#FFFFFF" textRollOverColor="#FFFFFF" textSelectedColor="#FFFFFF"/>
			<mx:CheckBox 
				fillColors="[#008800,#008800]"
				fillAlphas="[1,1]"
				iconColor="#FFFFFF"
				label="verdediging 2e lijn" 
				id="cb_verdediging_2e_lijn" 
				valueCommit="filterMarkers();"
				selected="true" color="#FFFFFF" textRollOverColor="#FFFFFF" textSelectedColor="#FFFFFF"/>
			<mx:CheckBox 
				fillColors="[#000000,#000000]"
				fillAlphas="[1,1]"
				iconColor="#FFFFFF"
				label="verdediging antitankcentrum" 
				id="cb_verdediging_antitankcentrum" 
				valueCommit="filterMarkers();"
				selected="true" color="#FFFFFF" textRollOverColor="#FFFFFF" textSelectedColor="#FFFFFF"/>

			<mx:Label text="Code"  color="#FFFFFF" fontWeight="bold"/>
			<mx:ComboBox id="codeFilter" 
				width="186"
				maxWidth="186"
				dataProvider="{codeLijst}"
				selectedIndex="0"
				labelField="code"
				valueCommit="filterMarkers();"
				rowCount="8"></mx:ComboBox>

			<mx:Label text="Gemeente"  color="#FFFFFF" fontWeight="bold"/>
			<components:ComboBoxEx id="gemeenteFilter"
				width="186"
				maxWidth="186"
				dataProvider="{gemeenteLijst}"
				selectedIndex="0"
				labelField="gemeente"
				valueField="gemeente"
				valueCommit="filterMarkers();"
				rowCount="8"></components:ComboBoxEx>
				
			<mx:Label text="Deelgemeente"  color="#FFFFFF" fontWeight="bold"/>
			<mx:ComboBox id="deelgemeenteFilter"
				width="186"
				maxWidth="186"
				dataProvider="{deelgemeenteLijst}"
				selectedIndex="0"
				labelField="deelgemeente"
				valueCommit="filterMarkers();"
				change="deelgemeente_onChangeHandler(event)"
				rowCount="8"></mx:ComboBox>
				
		</mx:VBox>

	</mx:HBox>

</mx:Application>
